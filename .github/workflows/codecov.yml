name: "CodeCov"

on:
  push:
    branches: [ main ]
  pull_request:
    # The branches below must be a subset of the branches above
    branches: [ main ]
  schedule:
    - cron: '23 7 * * 2'

jobs:
  run:
    name: CodeCov
    runs-on: ubuntu-latest
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'cpp' ]
        # CodeQL supports [ 'cpp', 'csharp', 'go', 'java', 'javascript', 'python', 'ruby' ]
        # Learn more about CodeQL language support at https://git.io/codeql-language-support

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        submodules: 'recursive'

    - name: setup
      run: |
        whereis cmake
        which cmake
        sudo apt-get --quiet update --yes
        sudo apt-get --quiet install --yes make build-essential gcc clang gcc-multilib lsb-release wget libtool autoconf unzip cmake llvm gcovr
        cmake --version
        whereis cmake
        which cmake

    - name: Generate CoV report
      run: |
        /usr/bin/cmake --version
        gcc --version
        ar_version=$(gcc-ar --version)
        ranlib_v=$(which ranlib)
        echo "gcc-ar: ${ar_version}"
        echo "ranlib: ${ranlib_v}"
        mkdir build
        cd build
        /usr/bin/cmake -DARCH=x64 -DTOOLCHAIN=GCC -DTARGET=Release -DCRYPTO=mbedtls -DGCOV=ON ..
        cat os_stub/cryptlib_mbedtls/CMakeFiles/cryptlib_mbedtls.dir/link.txt 
        make copy_sample_key
        make
        mkdir cov_report
        gcovr -r ../ . --html --html-details -o cov_report/example-html-details.html

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v2
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        directory: ./build/cov_reports/
        env_vars: OS,CPP
        fail_ci_if_error: true
        path_to_write_report: ./cov_report/codecov_report.txt
        verbose: true
